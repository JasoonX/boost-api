/*
Boost API

This is a REST API of the Boost App.

API version: 0.0.1-beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
)

// RelatedEntity struct for RelatedEntity
type RelatedEntity struct {
	Id   *string     `json:"id,omitempty"`
	Type *EntityType `json:"type,omitempty"`
}

// NewRelatedEntity instantiates a new RelatedEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelatedEntity() *RelatedEntity {
	this := RelatedEntity{}
	return &this
}

// NewRelatedEntityWithDefaults instantiates a new RelatedEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelatedEntityWithDefaults() *RelatedEntity {
	this := RelatedEntity{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RelatedEntity) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelatedEntity) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RelatedEntity) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RelatedEntity) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RelatedEntity) GetType() EntityType {
	if o == nil || o.Type == nil {
		var ret EntityType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelatedEntity) GetTypeOk() (*EntityType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RelatedEntity) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given EntityType and assigns it to the Type field.
func (o *RelatedEntity) SetType(v EntityType) {
	o.Type = &v
}

func (o RelatedEntity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableRelatedEntity struct {
	value *RelatedEntity
	isSet bool
}

func (v NullableRelatedEntity) Get() *RelatedEntity {
	return v.value
}

func (v *NullableRelatedEntity) Set(val *RelatedEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableRelatedEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableRelatedEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelatedEntity(val *RelatedEntity) *NullableRelatedEntity {
	return &NullableRelatedEntity{value: val, isSet: true}
}

func (v NullableRelatedEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelatedEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
