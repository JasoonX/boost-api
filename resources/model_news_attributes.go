/*
Boost API

This is a REST API of the Boost App.

API version: 0.0.1-beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"time"
)

// NewsAttributes struct for NewsAttributes
type NewsAttributes struct {
	CreatedAt time.Time  `json:"created_at"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	Media     *NewsMedia `json:"media,omitempty"`
}

// NewNewsAttributes instantiates a new NewsAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewsAttributes(createdAt time.Time) *NewsAttributes {
	this := NewsAttributes{}
	this.CreatedAt = createdAt
	return &this
}

// NewNewsAttributesWithDefaults instantiates a new NewsAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewsAttributesWithDefaults() *NewsAttributes {
	this := NewsAttributes{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value
func (o *NewsAttributes) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *NewsAttributes) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *NewsAttributes) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *NewsAttributes) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewsAttributes) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *NewsAttributes) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *NewsAttributes) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetMedia returns the Media field value if set, zero value otherwise.
func (o *NewsAttributes) GetMedia() NewsMedia {
	if o == nil || o.Media == nil {
		var ret NewsMedia
		return ret
	}
	return *o.Media
}

// GetMediaOk returns a tuple with the Media field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewsAttributes) GetMediaOk() (*NewsMedia, bool) {
	if o == nil || o.Media == nil {
		return nil, false
	}
	return o.Media, true
}

// HasMedia returns a boolean if a field has been set.
func (o *NewsAttributes) HasMedia() bool {
	if o != nil && o.Media != nil {
		return true
	}

	return false
}

// SetMedia gets a reference to the given NewsMedia and assigns it to the Media field.
func (o *NewsAttributes) SetMedia(v NewsMedia) {
	o.Media = &v
}

func (o NewsAttributes) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.Media != nil {
		toSerialize["media"] = o.Media
	}
	return json.Marshal(toSerialize)
}

type NullableNewsAttributes struct {
	value *NewsAttributes
	isSet bool
}

func (v NullableNewsAttributes) Get() *NewsAttributes {
	return v.value
}

func (v *NullableNewsAttributes) Set(val *NewsAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableNewsAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableNewsAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewsAttributes(val *NewsAttributes) *NullableNewsAttributes {
	return &NullableNewsAttributes{value: val, isSet: true}
}

func (v NullableNewsAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewsAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
