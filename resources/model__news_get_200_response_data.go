/*
Boost API

This is a REST API of the Boost App.

API version: 0.0.1-beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
)

// NewsGet200ResponseData struct for NewsGet200ResponseData
type NewsGet200ResponseData struct {
	News []News `json:"news,omitempty"`
}

// NewNewsGet200ResponseData instantiates a new NewsGet200ResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewsGet200ResponseData() *NewsGet200ResponseData {
	this := NewsGet200ResponseData{}
	return &this
}

// NewNewsGet200ResponseDataWithDefaults instantiates a new NewsGet200ResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewsGet200ResponseDataWithDefaults() *NewsGet200ResponseData {
	this := NewsGet200ResponseData{}
	return &this
}

// GetNews returns the News field value if set, zero value otherwise.
func (o *NewsGet200ResponseData) GetNews() []News {
	if o == nil || o.News == nil {
		var ret []News
		return ret
	}
	return o.News
}

// GetNewsOk returns a tuple with the News field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewsGet200ResponseData) GetNewsOk() ([]News, bool) {
	if o == nil || o.News == nil {
		return nil, false
	}
	return o.News, true
}

// HasNews returns a boolean if a field has been set.
func (o *NewsGet200ResponseData) HasNews() bool {
	if o != nil && o.News != nil {
		return true
	}

	return false
}

// SetNews gets a reference to the given []News and assigns it to the News field.
func (o *NewsGet200ResponseData) SetNews(v []News) {
	o.News = v
}

func (o NewsGet200ResponseData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.News != nil {
		toSerialize["news"] = o.News
	}
	return json.Marshal(toSerialize)
}

type NullableNewsGet200ResponseData struct {
	value *NewsGet200ResponseData
	isSet bool
}

func (v NullableNewsGet200ResponseData) Get() *NewsGet200ResponseData {
	return v.value
}

func (v *NullableNewsGet200ResponseData) Set(val *NewsGet200ResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableNewsGet200ResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableNewsGet200ResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewsGet200ResponseData(val *NewsGet200ResponseData) *NullableNewsGet200ResponseData {
	return &NullableNewsGet200ResponseData{value: val, isSet: true}
}

func (v NullableNewsGet200ResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewsGet200ResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
