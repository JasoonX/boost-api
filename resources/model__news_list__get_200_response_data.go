/*
Boost API

This is a REST API of the Boost App.

API version: 0.0.1-beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
)

// NewsListGet200ResponseData struct for NewsListGet200ResponseData
type NewsListGet200ResponseData struct {
	Cars []News `json:"cars,omitempty"`
}

// NewNewsListGet200ResponseData instantiates a new NewsListGet200ResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewsListGet200ResponseData() *NewsListGet200ResponseData {
	this := NewsListGet200ResponseData{}
	return &this
}

// NewNewsListGet200ResponseDataWithDefaults instantiates a new NewsListGet200ResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewsListGet200ResponseDataWithDefaults() *NewsListGet200ResponseData {
	this := NewsListGet200ResponseData{}
	return &this
}

// GetCars returns the Cars field value if set, zero value otherwise.
func (o *NewsListGet200ResponseData) GetCars() []News {
	if o == nil || o.Cars == nil {
		var ret []News
		return ret
	}
	return o.Cars
}

// GetCarsOk returns a tuple with the Cars field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewsListGet200ResponseData) GetCarsOk() ([]News, bool) {
	if o == nil || o.Cars == nil {
		return nil, false
	}
	return o.Cars, true
}

// HasCars returns a boolean if a field has been set.
func (o *NewsListGet200ResponseData) HasCars() bool {
	if o != nil && o.Cars != nil {
		return true
	}

	return false
}

// SetCars gets a reference to the given []News and assigns it to the Cars field.
func (o *NewsListGet200ResponseData) SetCars(v []News) {
	o.Cars = v
}

func (o NewsListGet200ResponseData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Cars != nil {
		toSerialize["cars"] = o.Cars
	}
	return json.Marshal(toSerialize)
}

type NullableNewsListGet200ResponseData struct {
	value *NewsListGet200ResponseData
	isSet bool
}

func (v NullableNewsListGet200ResponseData) Get() *NewsListGet200ResponseData {
	return v.value
}

func (v *NullableNewsListGet200ResponseData) Set(val *NewsListGet200ResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableNewsListGet200ResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableNewsListGet200ResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewsListGet200ResponseData(val *NewsListGet200ResponseData) *NullableNewsListGet200ResponseData {
	return &NullableNewsListGet200ResponseData{value: val, isSet: true}
}

func (v NullableNewsListGet200ResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewsListGet200ResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
