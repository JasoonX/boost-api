/*
Boost API

This is a REST API of the Boost App.

API version: 0.0.1-beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
)

// NewsRelationships struct for NewsRelationships
type NewsRelationships struct {
	Author NewsRelationshipsAuthor `json:"author"`
}

// NewNewsRelationships instantiates a new NewsRelationships object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewsRelationships(author NewsRelationshipsAuthor) *NewsRelationships {
	this := NewsRelationships{}
	this.Author = author
	return &this
}

// NewNewsRelationshipsWithDefaults instantiates a new NewsRelationships object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewsRelationshipsWithDefaults() *NewsRelationships {
	this := NewsRelationships{}
	return &this
}

// GetAuthor returns the Author field value
func (o *NewsRelationships) GetAuthor() NewsRelationshipsAuthor {
	if o == nil {
		var ret NewsRelationshipsAuthor
		return ret
	}

	return o.Author
}

// GetAuthorOk returns a tuple with the Author field value
// and a boolean to check if the value has been set.
func (o *NewsRelationships) GetAuthorOk() (*NewsRelationshipsAuthor, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Author, true
}

// SetAuthor sets field value
func (o *NewsRelationships) SetAuthor(v NewsRelationshipsAuthor) {
	o.Author = v
}

func (o NewsRelationships) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["author"] = o.Author
	}
	return json.Marshal(toSerialize)
}

type NullableNewsRelationships struct {
	value *NewsRelationships
	isSet bool
}

func (v NullableNewsRelationships) Get() *NewsRelationships {
	return v.value
}

func (v *NullableNewsRelationships) Set(val *NewsRelationships) {
	v.value = val
	v.isSet = true
}

func (v NullableNewsRelationships) IsSet() bool {
	return v.isSet
}

func (v *NullableNewsRelationships) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewsRelationships(val *NewsRelationships) *NullableNewsRelationships {
	return &NullableNewsRelationships{value: val, isSet: true}
}

func (v NullableNewsRelationships) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewsRelationships) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
