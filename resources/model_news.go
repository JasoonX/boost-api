/*
Boost API

This is a REST API of the Boost App.

API version: 0.0.1-beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
)

// News struct for News
type News struct {
	Id        string      `json:"id"`
	AuthorId  string      `json:"author_id"`
	CreatedAt string      `json:"created_at"`
	UpdatedAt *string     `json:"updated_at,omitempty"`
	Media     []NewsMedia `json:"media,omitempty"`
}

// NewNews instantiates a new News object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNews(id string, authorId string, createdAt string) *News {
	this := News{}
	this.Id = id
	this.AuthorId = authorId
	this.CreatedAt = createdAt
	return &this
}

// NewNewsWithDefaults instantiates a new News object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewsWithDefaults() *News {
	this := News{}
	return &this
}

// GetId returns the Id field value
func (o *News) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *News) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *News) SetId(v string) {
	o.Id = v
}

// GetAuthorId returns the AuthorId field value
func (o *News) GetAuthorId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuthorId
}

// GetAuthorIdOk returns a tuple with the AuthorId field value
// and a boolean to check if the value has been set.
func (o *News) GetAuthorIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthorId, true
}

// SetAuthorId sets field value
func (o *News) SetAuthorId(v string) {
	o.AuthorId = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *News) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *News) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *News) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *News) GetUpdatedAt() string {
	if o == nil || o.UpdatedAt == nil {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *News) GetUpdatedAtOk() (*string, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *News) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *News) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetMedia returns the Media field value if set, zero value otherwise.
func (o *News) GetMedia() []NewsMedia {
	if o == nil || o.Media == nil {
		var ret []NewsMedia
		return ret
	}
	return o.Media
}

// GetMediaOk returns a tuple with the Media field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *News) GetMediaOk() ([]NewsMedia, bool) {
	if o == nil || o.Media == nil {
		return nil, false
	}
	return o.Media, true
}

// HasMedia returns a boolean if a field has been set.
func (o *News) HasMedia() bool {
	if o != nil && o.Media != nil {
		return true
	}

	return false
}

// SetMedia gets a reference to the given []NewsMedia and assigns it to the Media field.
func (o *News) SetMedia(v []NewsMedia) {
	o.Media = v
}

func (o News) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["author_id"] = o.AuthorId
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.Media != nil {
		toSerialize["media"] = o.Media
	}
	return json.Marshal(toSerialize)
}

type NullableNews struct {
	value *News
	isSet bool
}

func (v NullableNews) Get() *News {
	return v.value
}

func (v *NullableNews) Set(val *News) {
	v.value = val
	v.isSet = true
}

func (v NullableNews) IsSet() bool {
	return v.isSet
}

func (v *NullableNews) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNews(val *News) *NullableNews {
	return &NullableNews{value: val, isSet: true}
}

func (v NullableNews) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNews) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
