/*
Boost API

This is a REST API of the Boost App.

API version: 0.0.1-beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
)

// News struct for News
type News struct {
	Id            string            `json:"id"`
	Type          EntityType        `json:"type"`
	Attributes    NewsAttributes    `json:"attributes"`
	Relationships NewsRelationships `json:"relationships"`
}

// NewNews instantiates a new News object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNews(id string, type_ EntityType, attributes NewsAttributes, relationships NewsRelationships) *News {
	this := News{}
	this.Id = id
	this.Type = type_
	this.Attributes = attributes
	this.Relationships = relationships
	return &this
}

// NewNewsWithDefaults instantiates a new News object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewsWithDefaults() *News {
	this := News{}
	return &this
}

// GetId returns the Id field value
func (o *News) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *News) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *News) SetId(v string) {
	o.Id = v
}

// GetType returns the Type field value
func (o *News) GetType() EntityType {
	if o == nil {
		var ret EntityType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *News) GetTypeOk() (*EntityType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *News) SetType(v EntityType) {
	o.Type = v
}

// GetAttributes returns the Attributes field value
func (o *News) GetAttributes() NewsAttributes {
	if o == nil {
		var ret NewsAttributes
		return ret
	}

	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value
// and a boolean to check if the value has been set.
func (o *News) GetAttributesOk() (*NewsAttributes, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Attributes, true
}

// SetAttributes sets field value
func (o *News) SetAttributes(v NewsAttributes) {
	o.Attributes = v
}

// GetRelationships returns the Relationships field value
func (o *News) GetRelationships() NewsRelationships {
	if o == nil {
		var ret NewsRelationships
		return ret
	}

	return o.Relationships
}

// GetRelationshipsOk returns a tuple with the Relationships field value
// and a boolean to check if the value has been set.
func (o *News) GetRelationshipsOk() (*NewsRelationships, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Relationships, true
}

// SetRelationships sets field value
func (o *News) SetRelationships(v NewsRelationships) {
	o.Relationships = v
}

func (o News) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["attributes"] = o.Attributes
	}
	if true {
		toSerialize["relationships"] = o.Relationships
	}
	return json.Marshal(toSerialize)
}

type NullableNews struct {
	value *News
	isSet bool
}

func (v NullableNews) Get() *News {
	return v.value
}

func (v *NullableNews) Set(val *News) {
	v.value = val
	v.isSet = true
}

func (v NullableNews) IsSet() bool {
	return v.isSet
}

func (v *NullableNews) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNews(val *News) *NullableNews {
	return &NullableNews{value: val, isSet: true}
}

func (v NullableNews) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNews) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
