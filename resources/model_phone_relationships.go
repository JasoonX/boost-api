/*
Boost API

This is a REST API of the Boost App.

API version: 0.0.1-beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
)

// PhoneRelationships struct for PhoneRelationships
type PhoneRelationships struct {
	User PhoneRelationshipsUser `json:"user"`
}

// NewPhoneRelationships instantiates a new PhoneRelationships object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPhoneRelationships(user PhoneRelationshipsUser) *PhoneRelationships {
	this := PhoneRelationships{}
	this.User = user
	return &this
}

// NewPhoneRelationshipsWithDefaults instantiates a new PhoneRelationships object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPhoneRelationshipsWithDefaults() *PhoneRelationships {
	this := PhoneRelationships{}
	return &this
}

// GetUser returns the User field value
func (o *PhoneRelationships) GetUser() PhoneRelationshipsUser {
	if o == nil {
		var ret PhoneRelationshipsUser
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *PhoneRelationships) GetUserOk() (*PhoneRelationshipsUser, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *PhoneRelationships) SetUser(v PhoneRelationshipsUser) {
	o.User = v
}

func (o PhoneRelationships) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["user"] = o.User
	}
	return json.Marshal(toSerialize)
}

type NullablePhoneRelationships struct {
	value *PhoneRelationships
	isSet bool
}

func (v NullablePhoneRelationships) Get() *PhoneRelationships {
	return v.value
}

func (v *NullablePhoneRelationships) Set(val *PhoneRelationships) {
	v.value = val
	v.isSet = true
}

func (v NullablePhoneRelationships) IsSet() bool {
	return v.isSet
}

func (v *NullablePhoneRelationships) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhoneRelationships(val *PhoneRelationships) *NullablePhoneRelationships {
	return &NullablePhoneRelationships{value: val, isSet: true}
}

func (v NullablePhoneRelationships) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhoneRelationships) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
