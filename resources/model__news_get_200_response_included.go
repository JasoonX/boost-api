/*
Boost API

This is a REST API of the Boost App.

API version: 0.0.1-beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
)

// NewsGet200ResponseIncluded struct for NewsGet200ResponseIncluded
type NewsGet200ResponseIncluded struct {
	Author *User `json:"author,omitempty"`
}

// NewNewsGet200ResponseIncluded instantiates a new NewsGet200ResponseIncluded object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewsGet200ResponseIncluded() *NewsGet200ResponseIncluded {
	this := NewsGet200ResponseIncluded{}
	return &this
}

// NewNewsGet200ResponseIncludedWithDefaults instantiates a new NewsGet200ResponseIncluded object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewsGet200ResponseIncludedWithDefaults() *NewsGet200ResponseIncluded {
	this := NewsGet200ResponseIncluded{}
	return &this
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *NewsGet200ResponseIncluded) GetAuthor() User {
	if o == nil || o.Author == nil {
		var ret User
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewsGet200ResponseIncluded) GetAuthorOk() (*User, bool) {
	if o == nil || o.Author == nil {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *NewsGet200ResponseIncluded) HasAuthor() bool {
	if o != nil && o.Author != nil {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given User and assigns it to the Author field.
func (o *NewsGet200ResponseIncluded) SetAuthor(v User) {
	o.Author = &v
}

func (o NewsGet200ResponseIncluded) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Author != nil {
		toSerialize["author"] = o.Author
	}
	return json.Marshal(toSerialize)
}

type NullableNewsGet200ResponseIncluded struct {
	value *NewsGet200ResponseIncluded
	isSet bool
}

func (v NullableNewsGet200ResponseIncluded) Get() *NewsGet200ResponseIncluded {
	return v.value
}

func (v *NullableNewsGet200ResponseIncluded) Set(val *NewsGet200ResponseIncluded) {
	v.value = val
	v.isSet = true
}

func (v NullableNewsGet200ResponseIncluded) IsSet() bool {
	return v.isSet
}

func (v *NullableNewsGet200ResponseIncluded) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewsGet200ResponseIncluded(val *NewsGet200ResponseIncluded) *NullableNewsGet200ResponseIncluded {
	return &NullableNewsGet200ResponseIncluded{value: val, isSet: true}
}

func (v NullableNewsGet200ResponseIncluded) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewsGet200ResponseIncluded) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
