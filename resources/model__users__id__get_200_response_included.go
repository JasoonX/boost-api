/*
Boost API

This is a REST API of the Boost App.

API version: 0.0.1-beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
)

// UsersIdGet200ResponseIncluded struct for UsersIdGet200ResponseIncluded
type UsersIdGet200ResponseIncluded struct {
	// Emails that belong to this user.
	Emails []Email `json:"emails,omitempty"`
	// Phones that belong to this user.
	Phones []Phone `json:"phones,omitempty"`
}

// NewUsersIdGet200ResponseIncluded instantiates a new UsersIdGet200ResponseIncluded object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsersIdGet200ResponseIncluded() *UsersIdGet200ResponseIncluded {
	this := UsersIdGet200ResponseIncluded{}
	return &this
}

// NewUsersIdGet200ResponseIncludedWithDefaults instantiates a new UsersIdGet200ResponseIncluded object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsersIdGet200ResponseIncludedWithDefaults() *UsersIdGet200ResponseIncluded {
	this := UsersIdGet200ResponseIncluded{}
	return &this
}

// GetEmails returns the Emails field value if set, zero value otherwise.
func (o *UsersIdGet200ResponseIncluded) GetEmails() []Email {
	if o == nil || o.Emails == nil {
		var ret []Email
		return ret
	}
	return o.Emails
}

// GetEmailsOk returns a tuple with the Emails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersIdGet200ResponseIncluded) GetEmailsOk() ([]Email, bool) {
	if o == nil || o.Emails == nil {
		return nil, false
	}
	return o.Emails, true
}

// HasEmails returns a boolean if a field has been set.
func (o *UsersIdGet200ResponseIncluded) HasEmails() bool {
	if o != nil && o.Emails != nil {
		return true
	}

	return false
}

// SetEmails gets a reference to the given []Email and assigns it to the Emails field.
func (o *UsersIdGet200ResponseIncluded) SetEmails(v []Email) {
	o.Emails = v
}

// GetPhones returns the Phones field value if set, zero value otherwise.
func (o *UsersIdGet200ResponseIncluded) GetPhones() []Phone {
	if o == nil || o.Phones == nil {
		var ret []Phone
		return ret
	}
	return o.Phones
}

// GetPhonesOk returns a tuple with the Phones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersIdGet200ResponseIncluded) GetPhonesOk() ([]Phone, bool) {
	if o == nil || o.Phones == nil {
		return nil, false
	}
	return o.Phones, true
}

// HasPhones returns a boolean if a field has been set.
func (o *UsersIdGet200ResponseIncluded) HasPhones() bool {
	if o != nil && o.Phones != nil {
		return true
	}

	return false
}

// SetPhones gets a reference to the given []Phone and assigns it to the Phones field.
func (o *UsersIdGet200ResponseIncluded) SetPhones(v []Phone) {
	o.Phones = v
}

func (o UsersIdGet200ResponseIncluded) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Emails != nil {
		toSerialize["emails"] = o.Emails
	}
	if o.Phones != nil {
		toSerialize["phones"] = o.Phones
	}
	return json.Marshal(toSerialize)
}

type NullableUsersIdGet200ResponseIncluded struct {
	value *UsersIdGet200ResponseIncluded
	isSet bool
}

func (v NullableUsersIdGet200ResponseIncluded) Get() *UsersIdGet200ResponseIncluded {
	return v.value
}

func (v *NullableUsersIdGet200ResponseIncluded) Set(val *UsersIdGet200ResponseIncluded) {
	v.value = val
	v.isSet = true
}

func (v NullableUsersIdGet200ResponseIncluded) IsSet() bool {
	return v.isSet
}

func (v *NullableUsersIdGet200ResponseIncluded) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsersIdGet200ResponseIncluded(val *UsersIdGet200ResponseIncluded) *NullableUsersIdGet200ResponseIncluded {
	return &NullableUsersIdGet200ResponseIncluded{value: val, isSet: true}
}

func (v NullableUsersIdGet200ResponseIncluded) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsersIdGet200ResponseIncluded) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
